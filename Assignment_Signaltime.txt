#include <bits/stdc++.h>

using namespace std;

int SignalTime(vector<vector<int>>& times, int n, int k)
{
    int minimum_time = 0;
    
    //Initialize adj list
    vector<vector<pair<int,int>>>adj(n+1);
    
    for(int i = 0; i < times.size(); i++)
    {
        int source_node = times[i][0];
        int targ_node = times[i][1];
        int distance = times[i][2];
        adj[source_node].push_back({distance,targ_node});
    }
    
    //Dijakstra's algorithm
    priority_queue< pair<int,int>, vector<pair<int,int>>,greater<pair<int,int>>> pq;
    vector<int> dist(n+1);
    
    //initalize the distace to all node from source node as infinity
    for(int i = 0; i <= n; i++)
    {
        dist[i] = 1e9;
    }
    
    //distance of kth node from kth node as 0    
    dist[k] = 0;
    pq.push({0,k});
    
    while(!pq.empty())
    {
        int dis = pq.top().first;
        int node = pq.top().second;
        pq.pop();
        for(auto it: adj[node])
        {
            int adjdist = it.first;
            int adjnode = it.second;
            int sum = dis + adjdist;
            
            if(dist[adjnode] > sum)
            {
                dist[adjnode] = sum;
                pq.push({sum,it.second});
            }
        }
    }
    
    for(int j = 1; j <= n; j++)
    {
        //if no nodes receive the signal return -1
        if(dist[j] == 1e9 )
        {
            return -1;
        }
        
        minimum_time = max(minimum_time, dist[j]);
    }
        
    return minimum_time;
}

int main() 
{
    int number_of_edges , number_of_nodes, k;
    cout << "Enter the number of edges in the network: ";
    cin >> number_of_edges;
    cout << "Enter the number of nodes in the network: ";
    cin >> number_of_nodes;
    cout << "Enter the source node: ";
    cin >> k;

    vector<vector<int>> times(number_of_edges);
    for (int i = 0; i < number_of_edges; i++) 
    {
        int u, v, w;
        cout << "Enter the source, target, and time for edge " << i+1 << ": ";
        cin >> u >> v >> w;
        times[i] = {u, v, w};
    }

    int min_time = SignalTime(times, number_of_nodes, k);
    
    if (min_time == -1) 
    {
        cout << "It is impossible for all the n nodes to receive the signal." << endl;
    }
    else 
    {
        cout << "The minimum time it takes for all the n nodes to receive the signal is: " << min_time << endl;
    }
    
    return 0;
}